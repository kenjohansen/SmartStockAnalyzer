/*
 * Copyright (c) 2025 Ken Johansen. All rights reserved.
 * This file is part of Smart Portfolio Analyzer and is licensed under the MIT license.
 * See the LICENSE file in the project root for more information.
 */

@page "/historical-performance"
@using SmartPortfolioAnalyzer.Core.Models
@inject IPortfolioService PortfolioService
@inject IAnalysisService AnalysisService

<PageTitle>Historical Performance</PageTitle>

<div class="container-fluid">
    <div class="row mt-4">
        <div class="col-12">
            <h1 class="display-4">Historical Performance</h1>
            <p class="lead">Track your portfolio's performance over time</p>
        </div>
    </div>

    <!-- Performance Timeline -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Performance Timeline</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="performanceChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Metrics -->
    <div class="row mt-4">
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Total Return</h5>
                    <h2 class="display-4 mb-0">@TotalReturn:F2%</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Annualized Return</h5>
                    <h2 class="display-4 mb-0">@AnnualizedReturn:F2%</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Sharpe Ratio</h5>
                    <h2 class="display-4 mb-0">@SharpeRatio:F2</h2>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Maximum Drawdown</h5>
                    <h2 class="display-4 mb-0">@MaxDrawdown:F2%</h2>
                </div>
            </div>
        </div>
    </div>

    <!-- Performance Comparison -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Performance Comparison</h5>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="comparisonChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Portfolio? Portfolio;
    private double TotalReturn = 0;
    private double AnnualizedReturn = 0;
    private double SharpeRatio = 0;
    private double MaxDrawdown = 0;

    protected override async Task OnInitializedAsync()
    {
        Portfolio = await PortfolioService.GetPortfolioAsync();
        await LoadPerformanceData();
    }

    private async Task LoadPerformanceData()
    {
        if (Portfolio != null)
        {
            var performance = await AnalysisService.GetHistoricalPerformanceAsync(Portfolio);
            TotalReturn = performance.TotalReturn;
            AnnualizedReturn = performance.AnnualizedReturn;
            SharpeRatio = performance.SharpeRatio;
            MaxDrawdown = performance.MaxDrawdown;
            InitializePerformanceChart(performance.DailyReturns);
            InitializeComparisonChart(performance.BenchmarkReturns);
        }
    }

    private void InitializePerformanceChart(double[] returns)
    {
        var ctx = document.getElementById("performanceChart").getContext("2d");
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: GenerateDateLabels(returns.Length),
                datasets: [{
                    label: 'Portfolio Value',
                    data: CalculateCumulativeReturns(returns),
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Portfolio Performance Over Time'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false
                    }
                }
            }
        });
    }

    private void InitializeComparisonChart(double[] benchmarkReturns)
    {
        var ctx = document.getElementById("comparisonChart").getContext("2d");
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: GenerateDateLabels(benchmarkReturns.Length),
                datasets: [
                    {
                        label: 'Portfolio',
                        data: CalculateCumulativeReturns(benchmarkReturns),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    },
                    {
                        label: 'Benchmark',
                        data: CalculateCumulativeReturns(benchmarkReturns),
                        borderColor: 'rgb(255, 99, 132)',
                        tension: 0.1
                    }
                ]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Portfolio vs Benchmark'
                    }
                },
                scales: {
                    y: {
                        beginAtZero: false
                    }
                }
            }
        });
    }

    private string[] GenerateDateLabels(int count)
    {
        var labels = new List<string>();
        var startDate = DateTime.Now.AddDays(-count);
        for (int i = 0; i < count; i++)
        {
            labels.Add(startDate.AddDays(i).ToString("MMM dd"));
        }
        return labels.ToArray();
    }

    private double[] CalculateCumulativeReturns(double[] returns)
    {
        var cumulativeReturns = new double[returns.Length];
        cumulativeReturns[0] = 100;
        for (int i = 1; i < returns.Length; i++)
        {
            cumulativeReturns[i] = cumulativeReturns[i - 1] * (1 + returns[i]);
        }
        return cumulativeReturns;
    }
}
